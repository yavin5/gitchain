{"version":3,"file":"main.js","sources":["../src/main.js"],"sourcesContent":["import { saveGithubAccessToken, viewChain, processTxns, fetchState, initP2P, getLibp2p, getServerPeers, connectAndSendTx } from './chain.ts';\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n    console.log('DOMContentLoaded triggered');\n    try {\n        // Initialize P2P and wait for completion\n        const isServer = localStorage.getItem('gitchain_github_access_token') !== null;\n        console.log('isServer:', isServer);\n        await initP2P(isServer);\n        const libp2p = getLibp2p();\n        if (!libp2p) {\n            console.error('libp2p initialization failed');\n            document.getElementById('token-message').textContent = 'Error: Failed to initialize P2P network';\n            return;\n        }\n\n        // DOM elements\n        const peerIdDisplay = document.getElementById('peer-id');\n        const messageInput = document.getElementById('message-input');\n        const sendButton = document.getElementById('send-message');\n        const messagesDiv = document.getElementById('messages');\n        const processTxnsButton = document.getElementById('process-txns');\n        const blockHeightDiv = document.getElementById('block-height');\n        const saveTokenButton = document.getElementById('save-token');\n        const tokenMessage = document.getElementById('token-message');\n\n        // Display shortened peer ID\n        if (libp2p && libp2p.peerId) {\n            const shortPeerId = libp2p.peerId.toString().slice(-8);\n            peerIdDisplay.textContent = shortPeerId;\n            console.log('Peer ID displayed:', shortPeerId);\n        } else {\n            console.error('Failed to display peer ID: libp2p or peerId not available');\n            peerIdDisplay.textContent = 'Error: Peer ID unavailable';\n        }\n\n        // Update block height\n        const stateData = await fetchState();\n        if (stateData) {\n            blockHeightDiv.textContent = `Block Height: ${stateData.content.chain.length}`;\n            console.log('Block height set:', stateData.content.chain.length);\n        } else {\n            console.error('Failed to fetch state');\n            blockHeightDiv.textContent = 'Error: Failed to fetch state';\n        }\n\n        // Show process button if server\n        processTxnsButton.classList.toggle('hidden', !isServer);\n        console.log('Process Transactions button visibility:', !processTxnsButton.classList.contains('hidden'));\n\n        // Pubsub subscribe for messages\n        if (libp2p && libp2p.services.pubsub) {\n            try {\n                await libp2p.services.pubsub.subscribe('gitchain-chat');\n                console.log('Subscribed to gitchain-chat');\n                libp2p.services.pubsub.addEventListener('message', (evt) => {\n                    if (evt.detail.topic === 'gitchain-chat') {\n                        const message = new TextDecoder().decode(evt.detail.data);\n                        const senderId = evt.detail.from.toString().slice(-8);\n                        const messageElement = document.createElement('p');\n                        messageElement.textContent = `${senderId}: ${message}`;\n                        messagesDiv.appendChild(messageElement);\n                        messagesDiv.scrollTop = messagesDiv.scrollHeight; // Auto-scroll to latest\n                        console.log('Received message:', { senderId, message });\n                    }\n                });\n            } catch (error) {\n                console.error('Failed to subscribe to gitchain-chat:', error);\n                messagesDiv.appendChild(document.createElement('p')).textContent = 'Error: Failed to subscribe to chat';\n            }\n        } else {\n            console.error('Pubsub service not available');\n            messagesDiv.appendChild(document.createElement('p')).textContent = 'Error: Pubsub unavailable';\n        }\n\n        // Send message\n        sendButton.addEventListener('click', async () => {\n            console.log('Send button clicked');\n            const message = messageInput.value.trim();\n            if (message && libp2p && libp2p.services.pubsub) {\n                try {\n                    // Publish to peers\n                    await libp2p.services.pubsub.publish('gitchain-chat', new TextEncoder().encode(message));\n                    console.log('Published message:', message);\n                    // Append locally to ensure sender sees their own message\n                    const shortPeerId = libp2p.peerId.toString().slice(-8);\n                    const messageElement = document.createElement('p');\n                    messageElement.textContent = `${shortPeerId}: ${message}`;\n                    messagesDiv.appendChild(messageElement);\n                    messagesDiv.scrollTop = messagesDiv.scrollHeight; // Auto-scroll\n                    messageInput.value = '';\n                } catch (error) {\n                    console.error('Failed to publish message:', error);\n                    messagesDiv.appendChild(document.createElement('p')).textContent = 'Error: Failed to send message';\n                }\n            } else {\n                console.error('Cannot send message: libp2p or pubsub not available or empty message');\n                messagesDiv.appendChild(document.createElement('p')).textContent = 'Error: Cannot send message';\n            }\n        });\n\n        // Save token event\n        saveTokenButton.addEventListener('click', async () => {\n            console.log('Save token button clicked');\n            try {\n                saveGithubAccessToken();\n                tokenMessage.textContent = 'Token saved successfully';\n                console.log('Token saved, re-initializing P2P as host');\n                await initP2P(true);\n                const newLibp2p = getLibp2p();\n                if (newLibp2p && newLibp2p.peerId) {\n                    const shortPeerId = newLibp2p.peerId.toString().slice(-8);\n                    peerIdDisplay.textContent = shortPeerId;\n                    console.log('Peer ID updated after PAT save:', shortPeerId);\n                } else {\n                    console.error('Failed to update peer ID after PAT save');\n                    peerIdDisplay.textContent = 'Error: Peer ID unavailable';\n                }\n                // Update server mode\n                processTxnsButton.classList.remove('hidden');\n                console.log('Process Transactions button shown after PAT save');\n            } catch (error) {\n                console.error('Failed to save PAT:', error);\n                tokenMessage.textContent = 'Error: Failed to save token';\n            }\n        });\n\n        // Process transactions\n        processTxnsButton.addEventListener('click', async () => {\n            console.log('Process Transactions button clicked');\n            try {\n                document.getElementById('processing-message').classList.add('visible');\n                await processTxns();\n                document.getElementById('processing-message').classList.remove('visible');\n                const updatedState = await fetchState();\n                if (updatedState) {\n                    blockHeightDiv.textContent = `Block Height: ${updatedState.content.chain.length}`;\n                    console.log('Block height updated:', updatedState.content.chain.length);\n                } else {\n                    console.error('Failed to fetch updated state');\n                    blockHeightDiv.textContent = 'Error: Failed to fetch state';\n                }\n            } catch (error) {\n                console.error('Failed to process transactions:', error);\n                document.getElementById('processing-message').textContent = 'Error: Failed to process transactions';\n            }\n        });\n\n        // View chain\n        document.getElementById('view-chain').addEventListener('click', async () => {\n            console.log('View Chain button clicked');\n            try {\n                await viewChain();\n            } catch (error) {\n                console.error('Failed to view chain:', error);\n                document.getElementById('output').textContent = 'Error: Failed to view chain';\n            }\n        });\n\n        // Log active servers if client\n        if (!isServer) {\n            const peers = getServerPeers();\n            console.log('Active server peers:', peers);\n        }\n    } catch (error) {\n        console.error('Error in DOMContentLoaded:', error);\n        document.getElementById('token-message').textContent = 'Error: Failed to initialize UI';\n    }\n});\n"],"names":[],"mappings":"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"}