import{createLibp2p as R}from"libp2p";import{webRTC as D}from"@libp2p/webrtc";import{noise as z}from"@chainsafe/libp2p-noise";import{yamux as J}from"@chainsafe/libp2p-yamux";import{identify as _}from"@libp2p/identify";import{circuitRelayTransport as U}from"@libp2p/circuit-relay-v2";import{bootstrap as B}from"@libp2p/bootstrap";import"@multiformats/multiaddr";import{concat as G,toString as W}from"uint8arrays";const S="0x097efb2a92bc5205e1615db52338a118f1619f3f";window.location.hostname==="localhost"&&Object.defineProperty(HTMLElement.prototype,"style",{set:()=>console.error("Inline style set detected in blockchain.ts! Check stack trace."),configurable:!0});const Q=location.hostname.split("."),j=Q[0],X=location.pathname==="/"||location.pathname===""?`${j}.github.io`:location.pathname.split("/")[1],p=`${j}/${X}`,M="data/state.json",$=`https://api.github.com/repos/${p}/contents/${M}`,P="gitchain_github_access_token",T=`https://api.github.com/repos/${p}/issues`,I="/gitchain/tx/1.0.0",f="data/server-peer.json",K=5*60*1e3;let g=null,v=!1,N=null;function L(e,o,t,s){const c=`${e}${o}${t}${JSON.stringify(s)}`;return CryptoJS.SHA256(c).toString()}function q(){const e=new Date().toISOString();return{index:0,previousHash:"0",timestamp:e,transactions:[],hash:L(0,"0",e,[])}}function O(e){return JSON.stringify(e,Object.keys(e).sort())}function E(e){const t=sha3.keccak256(e).match(/.{2}/g);if(!t)throw new Error("Failed to parse hex string");return new Uint8Array(t.map(s=>parseInt(s,16)))}function V(e){const o=new Uint8Array(e.length/2);for(let t=0;t<e.length;t+=2)o[t/2]=parseInt(e.substr(t,2),16);return o}function m(e){return Array.from(e,o=>o.toString(16).padStart(2,"0")).join("")}function k(e){try{const o=E(O({from:e.from,to:e.to,amount:e.amount,nonce:e.nonce})),t=V(e.signature);if(t.length!==65)return!1;const s=m(t.slice(0,32)),c=m(t.slice(32,64)),i=t[64]-27,a=new ec("secp256k1"),n=m(o),l={r:s,s:c},r=a.recoverPubKey(n,l,i),u=E(r.encode("array",!0).slice(1));return`0x${m(u.slice(-20))}`.toLowerCase()===e.from.toLowerCase()}catch{return!1}}async function Z(e,o){const t=m(E(O({from:e.from,to:e.to,amount:e.amount,nonce:e.nonce})));return k(e)?(o.nonces[e.from]||0)+1!==e.nonce?{valid:!1,txid:t}:e.from.toLowerCase()!==S.toLowerCase()&&(o.balances[e.from]||0)<e.amount?{valid:!1,txid:t}:!/^0x[a-fA-F0-9]{40}$/.test(e.from)||!/^0x[a-fA-F0-9]{40}$/.test(e.to)?{valid:!1,txid:t}:(o.pending.push(e),{valid:!0,txid:t}):{valid:!1,txid:t}}async function Y(e){if(e.pending.length===0)return null;const o=[],t={...e.balances},s={...e.nonces};for(const r of e.pending)k(r)&&(s[r.from]||0)+1===r.nonce&&(r.from.toLowerCase()===S.toLowerCase()||(t[r.from]||0)>=r.amount)&&(r.from.toLowerCase()!==S.toLowerCase()&&(t[r.from]=(t[r.from]||0)-r.amount),t[r.to]=(t[r.to]||0)+r.amount,s[r.from]=r.nonce,o.push(r));if(o.length===0)return e.pending=[],null;const c=e.chain.length,i=e.chain.length>0?e.chain[e.chain.length-1].hash:"0",a=new Date().toISOString(),n=L(c,i,a,o),l={index:c,previousHash:i,timestamp:a,transactions:o,hash:n};return e.chain.push(l),e.pending=[],e.balances=t,e.nonces=s,c}function h(){var o;let e=localStorage.getItem(P);if(!e){if(e=(o=document.getElementById("githubAccessToken"))==null?void 0:o.value,!e)return console.log("No GitHub access token provided"),alert("Please enter your GitHub access token."),null;localStorage.setItem(P,e)}return console.log("Retrieved GitHub access token"),e}async function ee(e){console.log("Entering initP2P, isHost:",e),v=e;try{console.log("Creating libp2p node..."),g=await R({addresses:{listen:["/webrtc","/p2p-circuit"]},transports:[U({hop:{enabled:!1}}),D({iceServers:[{urls:"stun:stun.l.google.com:19302"}]})],connectionEncrypters:[z()],streamMuxers:[J()],peerDiscovery:[B({list:["/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN","/dnsaddr/bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbX7TbXrHRQHh2","/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqduuO5wL","/dnsaddr/bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76C42gEOzRVzYVdigitaltA5dyxuEXsBC","/dnsaddr/bootstrap.libp2p.io/p2p/QmZa1sAxajnQjVM8WjWXoMbmPd7NsWhfKsPkErzpm9wGkp"]})],services:{identify:_()},connectionGater:{denyDialMultiaddr:async()=>!1}}),console.log("Starting libp2p node..."),await g.start(),console.log("libp2p started, peerId:",g.peerId.toString()),console.log("Waiting for libp2p initialization..."),await new Promise(t=>setTimeout(t,1e3)),g.addEventListener("peer:connect",t=>{console.log("Connected to peer:",t.detail.toString())}),console.log("Registering protocol handler for:",I),await g.handle(I,async({stream:t,connection:s})=>{console.log("Incoming TX stream from",s.remotePeer.toString());const c=await oe(t);try{const i=JSON.parse(c);if(k(i)){console.log("Valid TX received, creating GitHub issue");const a=JSON.stringify({type:"gitchain_txn",repo:p,txn:i}),n=await fetch(T,{method:"POST",headers:{Authorization:`token ${h()}`,Accept:"application/vnd.github.v3+json","Content-Type":"application/json"},body:JSON.stringify({title:`tx ${i.from} to ${i.to}`,body:a})});n.ok?console.log("Created issue for anonymous TX"):console.error("Failed to create issue:",n.status,await n.text())}else console.error("Invalid TX from P2P")}catch(i){console.error("Error processing TX:",i)}t.close()}),v&&(console.log("Host mode: Advertising peer info"),await H(),console.log("Setting interval for periodic peer advertising"),setInterval(H,K),window.addEventListener("beforeunload",async()=>{console.log("Window unloading, deleting server peer file"),await te()})),console.log("initP2P completed successfully")}catch(o){console.error("Failed to initialize P2P:",o),v&&alert("The server appears to be temporarily down. Please check your network or contact the blockchain administrator.")}}async function H(e=3,o=1e3){if(console.log("Entering advertiseServerPeer, retries:",e),!v||!g)return console.log("Not in host mode or libp2p not initialized"),!1;const t=g.peerId.toString(),s=g.getMultiaddrs().map(n=>n.toString()),c={peerId:t,multiaddrs:s,timestamp:Date.now()},i=JSON.stringify(c,null,2);if(console.log("Peer info to advertise:",i),i===N)return console.log("No change in peer info, skipping update"),!0;N=i;const a=h();if(!a)return console.error("No PAT available for advertising peer"),!1;for(let n=1;n<=e;n++){console.log(`Attempt ${n}/${e} to advertise peer info`);try{console.log("Fetching SHA for",f);const l=await F(f);console.log("SHA:",l||"none (new file)");const r={message:"Update server peer info",content:btoa(i),branch:"main"};l&&(r.sha=l),console.log("Sending PUT request to:",`https://api.github.com/repos/${p}/contents/${f}`);const u=await fetch(`https://api.github.com/repos/${p}/contents/${f}`,{method:"PUT",headers:{Authorization:`token ${a}`,Accept:"application/vnd.github.v3+json","Content-Type":"application/json"},body:JSON.stringify(r)});if(u.ok)return console.log("Advertised peer info successfully"),!0;{const d=await u.text();if(console.error(`Attempt ${n}/${e} - Failed to advertise peer: ${u.status} ${d}`),(u.status===403||u.status===429)&&(console.log(`Retrying after ${o}ms due to ${u.status}`),n<e)){await new Promise(C=>setTimeout(C,o));continue}throw new Error(`HTTP ${u.status}: ${d}`)}}catch(l){if(console.error(`Attempt ${n}/${e} - Error advertising peer:`,l),n===e)return console.error("All retries failed, alerting user"),alert("Failed to advertise server peer info. Ensure your PAT has repo scope and check API rate limits. Contact the administrator if the issue persists."),!1;await new Promise(r=>setTimeout(r,o))}}return console.log("Exiting advertiseServerPeer, failed after all retries"),!1}async function te(){console.log("Entering deleteServerPeerFile");const e=h();if(!e){console.log("No PAT available for deleting server peer file");return}try{console.log("Fetching SHA for",f);const o=await F(f);if(!o){console.log("No server peer file to delete");return}console.log("Sending DELETE request for",f);const t=await fetch(`https://api.github.com/repos/${p}/contents/${f}`,{method:"DELETE",headers:{Authorization:`token ${e}`,Accept:"application/vnd.github.v3+json","Content-Type":"application/json"},body:JSON.stringify({message:"Remove server peer info on unload",sha:o})});t.ok?console.log("Deleted server peer file successfully"):console.error("Failed to delete peer file:",t.status,await t.text())}catch(o){console.error("Error deleting peer file:",o)}}async function F(e){console.log("Entering getFileSha for",e);const o=h();if(!o)return console.log("No PAT available for fetching SHA"),null;try{console.log("Fetching SHA from:",`https://api.github.com/repos/${p}/contents/${e}?ref=main`);const t=await fetch(`https://api.github.com/repos/${p}/contents/${e}?ref=main`,{headers:{Authorization:`token ${o}`,Accept:"application/vnd.github.v3+json"}});if(t.ok){const s=await t.json();return console.log("SHA retrieved:",s.sha),s.sha}return t.status===404?(console.log("File does not exist, returning null SHA"),null):(console.error(`Failed to fetch SHA for ${e}: ${t.status} ${await t.text()}`),null)}catch(t){return console.error(`Error fetching SHA for ${e}:`,t),null}}async function oe(e){console.log("Reading stream to string");const o=[];for await(const c of e.source)o.push(c);const t=G(o),s=W(t);return console.log("Stream read complete, length:",s.length),s}async function w(){console.log("Entering fetchState");const e=h();if(!e)return console.log("No PAT available for fetching state"),null;try{console.log("Fetching state from:",$);const o=await fetch(`${$}?ref=main`,{headers:{Authorization:`token ${e}`,Accept:"application/vnd.github.v3+json"}});if(!o.ok){if(o.status===404)return console.log("State file not found"),null;throw console.error("Error fetching state:",o.status,await o.text()),new Error(`Error fetching state: ${o.statusText}`)}const t=await o.json(),s=JSON.parse(atob(t.content));return console.log("State fetched, chain length:",s.chain.length),{content:s,sha:t.sha}}catch(o){return console.error("Error fetching state:",o),null}}async function y(e,o,t,s=3){console.log("Entering updateState, message:",t);const c=h();if(!c)return console.log("No PAT available for updating state"),!1;const i=btoa(JSON.stringify(e,null,2));try{const a={message:t,content:i,branch:"main"};o&&(a.sha=o),console.log("Sending PUT request to update state");const n=await fetch($,{method:"PUT",headers:{Authorization:`token ${c}`,Accept:"application/vnd.github.v3+json","Content-Type":"application/json"},body:JSON.stringify(a)});if(!n.ok){if(n.status===409&&s>0){console.log("Conflict detected, retrying...");const l=await w();if(!l)throw new Error("Failed to refetch");return y(e,l.sha,t,s-1)}throw console.error("Error updating state:",n.status,await n.text()),new Error(`Error updating state: ${n.statusText}`)}return console.log("State updated successfully"),!0}catch(a){return console.error("Error updating state:",a),!1}}async function b(e,o,t){console.log("Entering closeIssueWithComment, issue:",e);const s=h();if(!s){console.log("No PAT available for closing issue");return}const c=t&&o!==null?`Confirmed in block ${o}`:"Invalid transaction",i="Gitchain is an innovative centralized blockchain using GitHub for storage and processing. It enables secure, transparent transactions via issues. Join the experiment in decentralized finance today!",a=`https://github.com/${p}`,n=`${c}. ${i} Learn more: ${a} (Repo: ${p})`;console.log("Creating comment for issue:",e),await fetch(`${T}/${e}/comments`,{method:"POST",headers:{Authorization:`token ${s}`,Accept:"application/vnd.github.v3+json","Content-Type":"application/json"},body:JSON.stringify({body:n})}),console.log("Closing issue:",e),await fetch(`${T}/${e}`,{method:"PATCH",headers:{Authorization:`token ${s}`,Accept:"application/vnd.github.v3+json","Content-Type":"application/json"},body:JSON.stringify({state:"closed"})})}async function ne(){console.log("Entering processTxns");const e=document.getElementById("output"),o=document.getElementById("processingMessage");o.classList.add("visible");let t=await w(),s=t==null?void 0:t.content;if(!s){if(console.log("No state found, initializing"),s={chain:[q()],pending:[],balances:{[S]:1e6},nonces:{},lastProcessedDate:new Date(0).toISOString()},!await y(s,null,"Initialize state")){console.log("Failed to initialize state"),e.textContent+=`
Failed to initialize.`,o.classList.remove("visible");return}t=await w(),s=t.content}console.log("Fetching open issues");const i=await(await fetch(`${T}?state=open&sort=created&direction=asc&per_page=100`,{headers:{Authorization:`token ${h()}`,Accept:"application/vnd.github.v3+json"}})).json();let a=s.lastProcessedDate;for(const n of i){if(!n.title.toLowerCase().startsWith("tx")||new Date(n.created_at)<=new Date(s.lastProcessedDate))continue;let l;try{const A=JSON.parse(n.body);if(A.type!=="gitchain_txn"){console.log("Skipping non-gitchain issue:",n.number),await b(n.number,null,!1);continue}if(A.repo!==p){console.log("Skipping issue from wrong repo:",n.number),await b(n.number,null,!1);continue}l=A.txn}catch{console.log("Invalid issue body, closing:",n.number),await b(n.number,null,!1);continue}console.log("Processing transaction from issue:",n.number);const{valid:r,txid:u}=await Z(l,s);console.log(`Transaction ID: ${u}, valid: ${r}`);const d=r?await Y(s):null;if(await b(n.number,d,r),r&&d!==null?(console.log(`Transaction ID: ${u} settled in block ${d}`),e.textContent+=`
Processed txn ${u} from issue #${n.number} in block ${d}`):(console.log(`Rejected invalid txn from issue #${n.number}`),e.textContent+=`
Rejected invalid txn from issue #${n.number}`),!await y(s,t.sha,`Process issue #${n.number}`)){console.log("Failed to update state after issue:",n.number),e.textContent+=`
Failed to update state after issue #${n.number}`,o.classList.remove("visible");return}t=await w(),s=t.content;const x=n.created_at;new Date(x)>new Date(a)&&(a=x)}a!==s.lastProcessedDate&&(console.log("Updating last processed date:",a),s.lastProcessedDate=a,await y(s,t.sha,"Update last processed date")),console.log("processTxns completed"),o.classList.remove("visible")}window.addEventListener("load",()=>{console.log("Window loaded, checking for PAT"),localStorage.getItem(P)?(console.log("PAT found, initializing P2P as host"),ee(!0)):(console.log("No PAT found, prompting user"),alert("Enter your GitHub access token (repo contents read/write, issues read/write) and save.")),console.log("Setting interval for transaction processing"),setInterval(()=>{ne()},15e3)});
